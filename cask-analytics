#!/usr/bin/env ruby

require 'date'
require 'json'
require 'open-uri'
require 'open3'
require 'optparse'
require 'pathname'

# Options
ARGV.push('--help') if ARGV.empty?

options = {}
OptionParser.new do |parser|
  parser.banner = <<~BANNER
    Show analytics information for casks in the main taps.

    Usage:
      #{File.basename($PROGRAM_NAME)} [options] <cask_name>

    Options:
  BANNER

  parser.on(
    '-a', '--no-age',
    'Do not show when cask was added (faster output).'
  )
end.parse!(into: options)

# Helpers
def shallow?(repo)
  Open3.capture2(
    'git', '-C', repo.to_path,
    'rev-parse', '--is-shallow-repository'
  ).first.strip == 'true'
end

# Run
HBC_TAPS = Pathname.new(Open3.capture2('brew', '--repository', 'homebrew/cask').first).dirname

ARGV.each do |cask_name|
  cask_path = HBC_TAPS.glob("homebrew-cask*/Casks/#{cask_name[0]}/#{cask_name}.rb").first

  abort 'Did not find any cask locally named ' + cask_name if cask_path.nil?

  puts cask_name

  analytics_dir = Pathname.new('/tmp').join('cask-analytics')
  analytics_dir.mkpath

  %w[30 90 365].each do |days|
    json_file = analytics_dir.join("#{days}d.json")

    unless json_file.exist?
      json_file.write(URI.parse(
        "https://formulae.brew.sh/api/analytics/cask-install/#{days}d.json"
      ).read)
    end

    analytics = JSON.parse(json_file.read)['items']
    cask_info = analytics.select { |hash| hash['cask'] == cask_name }.first

    print "#{days} days: "

    if cask_info.nil?
      puts 'n/a'
    else
      puts "#{cask_info['count']} (##{cask_info['number']})"
    end
  end

  cask_tap_dir = cask_path.dirname.dirname

  unless options[:'no-age']
    if shallow?(cask_tap_dir)
      system('git', '-C', cask_tap_dir.to_path, 'fetch', '--unshallow')
    end

    cask_added_date = Date.parse(
      Open3.capture2(
        'git', '-C', cask_tap_dir.to_path,
        'log', '--diff-filter=A',
        '--follow', '--max-count=1',
        '--format=%aI', cask_path.to_path
      ).first.strip
    )

    cask_added_formatted = cask_added_date.strftime('%Y, %B %d')
    cask_age = (Date.today - cask_added_date).to_i.to_s

    puts "Age: #{cask_age} days (added #{cask_added_formatted})"
  end

  puts # Empty line to separate multiple casks
end
