#!/bin/bash

readonly program="$(basename "${0}")"
readonly cap_fps='30'
readonly tmp_dir="$(mktemp -d)"
trap 'rm -rf "${tmp_dir}"' EXIT

function depends_on {
  local -r all_deps=("${@}")
  local missing_deps=()

  for dep in "${all_deps[@]}"; do
    hash "${dep}" 2> /dev/null || missing_deps+=("${dep}")
  done

  if [[ "${#missing_deps[@]}" -gt 0 ]]; then
    echo 'Missing required tools:' >&2
    printf '  %s\n' "${missing_deps[@]}" >&2
    exit 1
  fi
}

function get_output_path {
  local -r ext="${1}"
  local -r input_path="${2}"
  local -r init_output_path="${3}"

  if [[ -n "${init_output_path}" ]]; then
    [[ "${init_output_path##*.}" == "${ext##*.}" ]] && echo "${init_output_path}" || echo "${init_output_path}${ext}"
  else
    echo "$(pwd -P)/$(basename "${input_path%.*}${ext}")"
  fi
}

function try_overwrite {
  local -r force="${1}"
  local -r input_path="${2}"

  if [[ "${force}" == 'true' ]]; then
    mkdir -p "$(dirname "${input_path}")"
    return 0
  fi

  if [[ ! -d "$(dirname "${input_path}")" ]]; then
    echo "Cannot create '${input_path}'. Parent directory does not exist." >&2
    exit 1
  fi

  if [[ -e "${input_path}" ]]; then
    echo "Cannot write to '${input_path}'. Already exists." >&2
    exit 1
  fi
}

function usage {
  echo "
    Usage:
      ${program} [options] <file>

    Options:
      -f <integer>, --fps <integer>          Frames per second. Default is auto-detected from video, capped at ${cap_fps}.
      -w <interger>, --width <integer>       Resize the gif proportionally.
      -o <file>, --output-file <file>        File to output to. Default is with same name on current directory.
      -O, --overwrite                        Create intermediary directories and overwrite output.
      -g, --gifski                           Use gifski for the conversion.
      -h, --help                             Show this help.
  " | sed -E 's/^ {4}//'
}

# Options
args=()
while [[ "${1}" ]]; do
  case "${1}" in
    -h | --help)
      usage
      exit 0
      ;;
    -f | --fps)
      readonly chosen_fps="${2}"
      shift
      ;;
    -w | --width)
      readonly width="${2}"
      shift
      ;;
    -o | --output-file)
      readonly given_output_path="${2}"
      shift
      ;;
    -O | --overwrite)
      readonly overwrite='true'
      ;;
    -g | --gifski)
      depends_on 'gifski'
      readonly use_gifski='true'
      ;;
    --)
      shift
      args+=("${@}")
      break
      ;;
    -*)
      echo "Unrecognised option: ${1}"
      exit 1
      ;;
    *)
      args+=("${1}")
      ;;
  esac
  shift
done
set -- "${args[@]}"

readonly input_file="${1}"
readonly output_file="$(get_output_path '.gif' "${input_file}" "${given_output_path}")"
try_overwrite "${overwrite:-false}" "${output_file}"

if [[ "${#}" -ne 1 || ! -f "${input_file}" ]]; then
  usage
  exit 1
fi

depends_on 'ffmpeg'

# Set FPS
if [[ -z "${chosen_fps}" ]]; then
  depends_on 'ffprobe'

  readonly video_fps="$(ffprobe -loglevel error -select_streams v:0 -of default=noprint_wrappers=1:nokey=1 -show_entries stream=r_frame_rate "${input_file}" | bc)"
  readonly fps="$([[ "${video_fps}" -gt "${cap_fps}" ]] && echo "${cap_fps}" || echo "${video_fps}")"
else
  readonly fps="${chosen_fps}"
fi

# Make the animated gif
if [[ -z "${use_gifski}" ]]; then
  [[ -z "${width}" ]] && width='-1' # Make width same as original video, if none given

  readonly palette="${tmp_dir}/palette.png"
  ffmpeg -i "${input_file}" -filter_complex "fps=${fps},scale=${width}:-1:flags=lanczos,palettegen" "${palette}"
  ffmpeg -i "${input_file}" -i "${palette}" -filter_complex "fps=${fps},scale=${width}:-1:flags=lanczos[x];[x][1:v]paletteuse" "${output_file}"
else
  readonly frames_dir="${tmp_dir}/frames"
  mkdir -p "${frames_dir}"

  echo 'Extracting images from videoâ€¦'
  ffmpeg -loglevel quiet -i "${input_file}" -filter_complex "fps=${fps}" "${frames_dir}/output_mage%9d.png"

  options=()
  [[ -n "${width}" ]] && options+=('--width' "${width}")
  options+=('--fps' "${fps}")

  gifski "${frames_dir}/"* "${options[@]}" --output "${output_file}"
fi
