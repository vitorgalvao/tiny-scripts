#!/bin/bash

readonly program="$(basename "${0}")"

function absolute_path {
  local -r relative_path="${1}"

  if [[ -e "${relative_path}" ]]; then
    if [[ -d "${relative_path}" ]]; then
      cd "${relative_path}" || return 1
      pwd -P
    else
      cd "$(dirname "${relative_path}")" || return 1
      echo "$(pwd -P)/$(basename "${1%/}")"
    fi
  else
    echo "${FUNCNAME[0]}: no such file or directory: ${relative_path}" >&2
    return 1
  fi
}

function get_output_path {
  local -r ext="${1}"
  local -r input_path="${2}"
  local -r init_output_path="${3}"

  if [[ -n "${init_output_path}" ]]; then
    [[ "${init_output_path##*.}" == "${ext##*.}" ]] && echo "${init_output_path}" || echo "${init_output_path}${ext}"
  else
    echo "$(pwd -P)/$(basename "${input_path%.*}${ext}")"
  fi
}

function try_overwrite {
  local -r force="${1}"
  local -r input_path="${2}"

  if [[ "${force}" == 'true' ]]; then
    mkdir -p "$(dirname "${input_path}")"
    return 0
  fi

  if [[ ! -d "$(dirname "${input_path}")" ]]; then
    echo "Cannot create '${input_path}'. Parent directory does not exist." >&2
    exit 1
  fi

  if [[ -e "${input_path}" ]]; then
    echo "Cannot write to '${input_path}'. Already exists." >&2
    exit 1
  fi
}

function is_pkg_archive {
  local -r input_path="${1}"

  [[ "$(file --brief --mime-type "${input_path}")" == 'application/x-xar' ]]
}

function is_pkg_dir {
  local -r input_path="${1}"

  [[ "${input_path##*.}" == 'pkg' && "$(file --brief --mime-type "${input_path}")" == 'inode/directory' ]]
}

function is_mpkg {
  local -r input_path="${1}"

  [[ "${input_path##*.}" == 'mpkg' && "$(file --brief --mime-type "${input_path}")" == 'inode/directory' ]]
}

function remove_pkg_extension {
  sed -E 's/\.m?pkg$//' <<< "${1}"
}

function usage {
  echo "
    Extract pkg files in a logical hierarchy.

    Usage:
      ${program} [options] <path_to_pkg>

    Options:
      -o, --output-dir <dir>   Directory to extract to. Default is with same name on current directory. '.(m)pkg' will be removed from the end.
      -h, --help               Show this message.
  " | sed -E 's/^ {4}//'
}

# Options
args=()
while [[ "${1}" ]]; do
  case "${1}" in
    -h | --help)
      usage
      exit 0
      ;;
    -o | --output-dir)
      readonly given_output_path="${2}"
      shift
      ;;
    --)
      shift
      args+=("${@}")
      break
      ;;
    -*)
      echo "Unrecognised option: ${1}"
      exit 1
      ;;
    *)
      args+=("${1}")
      ;;
  esac
  shift
done
set -- "${args[@]}"

if [[ "${#}" -ne 1 ]]; then
  usage
  exit 1
fi

readonly input_pkg="${1}"
readonly extract_dir="$(mktemp -d)/extracted_pkg"
readonly output_dir="$(get_output_path '' "${input_pkg}" "$(remove_pkg_extension "${given_output_path}")")"
try_overwrite 'false' "${output_dir}" # If target directory exists, exit

# If mpkg, run script in all pkgs found inside
if is_mpkg "${input_pkg}"; then
  mkdir -p "${output_dir}"

  while IFS= read -r -d '' pkg; do
    "${0}" --output-dir "${output_dir}/$(basename "$(remove_pkg_extension "${pkg}")")" "${pkg}"
  done < <(find "${input_pkg}" -iname '*.pkg' -print0)

  exit
fi

# Begin pkg extraction
if is_pkg_archive "${input_pkg}"; then
  pkgutil --expand "${input_pkg}" "${extract_dir}"
elif is_pkg_dir "${input_pkg}"; then
  cp -R "${input_pkg}/" "${extract_dir}"
else
  echo 'Input does not seem like a valid .pkg' >&2
  exit 1
fi

while IFS= read -r -d '' payload; do
  payload_extract_dir="$(mktemp -d)"
  cd "${payload_extract_dir}" || exit 1

  if [[ "$(head -c 4 "${payload}")" == 'pbzx' ]]; then
    # Depends on pbzx
    if ! hash 'pbzx' 2> /dev/null; then
      echo '"pbzx" is required to unpack this payload!'
      exit 1
    fi

    pbzx -n "${payload}" | /usr/bin/cpio -i --preserve-modification-time 2> /dev/null
  else
    /usr/bin/gzip --decompress --suffix '' --stdout "${payload}" | /usr/bin/cpio -i --preserve-modification-time 2> /dev/null
  fi

  cd "$(dirname "${payload}")" || exit 1
  rm "${payload}"
  mv "${payload_extract_dir}" "${payload}"
done < <(find "${extract_dir}" -type f -name 'Payload' -print0)

while IFS= read -r -d '' pkg; do
  mv "${pkg}" "$(remove_pkg_extension "${pkg}")"
done < <(find "${extract_dir}" -type d -name '*.pkg' -print0)

mv "${extract_dir}" "${output_dir}"
